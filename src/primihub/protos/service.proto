syntax = "proto3";

option java_package = "com.primihub.grpc";
option java_multiple_files = true;
package primihub.rpc;

service DataSetService {
  rpc NewDataset(NewDatasetRequest) returns (NewDatasetResponse);
  rpc GetDataset(GetDatasetRequest) returns (GetDatasetResponse);
  rpc QueryResult(QueryResultRequest) returns (QueryResultResponse);
  rpc DownloadData(DownloadRequest) returns (stream DownloadRespone);
  rpc UploadData(stream UploadFileRequest) returns (UploadFileResponse);
}

message Status {
  enum Code {
    SUCCESS = 0;
    FAIL = 1;
  }
}

message QueryResultRequest {
  string request_id = 1;
  string file_path = 2;             // optional
}

message QueryResultResponse {
  repeated string file_list = 1;
  Status.Code code = 2;
  string info = 3;
}

message DownloadRequest {
  string request_id = 1;
  repeated string file_list = 2;     // optional
}

message DownloadRespone {
  string file_name = 1;
  bool is_end = 2;
  Status.Code code = 3;
  string info = 4;
  bytes data = 5;
}

message UploadFileRequest {
  enum FileType {
    CSV = 0;
    TXT = 1;
  }
  string file_name = 1;
  FileType type = 2;
  bytes data = 3;
}

message UploadFileResponse {
  Status.Code code = 1;
  string info = 2;
}

message NewDatasetRequest {
  enum Operator {
    REGISTER = 0;
    UNREGISTER = 1;
    UPDATE = 2;
  }
  Operator op_type = 1;
  MetaInfo meta_info = 2;
}

message NewDatasetResponse {
  enum ResultCode {
    SUCCESS = 0;
    FAIL = 1;
  }
  ResultCode ret_code = 1;
  string dataset_url = 2;
  string ret_msg = 3;
}

message GetDatasetRequest {
  repeated string id = 1;    // dataset id for request meta info,
                             // empty to acquire all dataset
}

message GetDatasetResponse {
  enum ResultCode {
    SUCCESS = 0;
    FAIL = 1;
  }
  ResultCode ret_code = 1;
  string ret_msg = 2;
  repeated DatasetData data_set = 3;
}

message DatasetData{
  enum Status {
    Available = 0;
    Unavailable = 1;
  }
  Status available = 1;
  MetaInfo meta_info = 2;
}

message MetaInfo {
  enum Visibility {
    PUBLIC = 0;
    PRIVATE = 1;
  }
  string id = 1;            // global unique
  string driver = 2;        // dataset type
  string access_info = 3;   // dataset access info
  string address = 4;       // location of dataset
  Visibility visibility = 5;  // visibility for dataset
  repeated DataTypeInfo data_type = 6;   // type for each field
}

message DataTypeInfo {
  enum PlainDataType {
    /// A NULL type having no physical storage
    NA = 0;
    /// Boolean as 1 bit, LSB bit-packed ordering
    BOOL = 1;

    /// Unsigned 8-bit little-endian integer
    UINT8 = 2;

    /// Signed 8-bit little-endian integer
    INT8 = 3;

    /// Unsigned 16-bit little-endian integer
    UINT16 = 4;

    /// Signed 16-bit little-endian integer
    INT16 = 5;

    /// Unsigned 32-bit little-endian integer
    UINT32 = 6;

    /// Signed 32-bit little-endian integer
    INT32 = 7;

    /// Unsigned 64-bit little-endian integer
    UINT64 = 8;

    /// Signed 64-bit little-endian integer
    INT64 = 9;

    /// 2-byte floating point value
    HALF_FLOAT = 10;

    /// 4-byte floating point value
    FLOAT = 11;

    /// 8-byte floating point value
    DOUBLE = 12;

    /// UTF8 variable-length string as List<Char>
    STRING = 13;

    /// Variable-length bytes (no guarantee of UTF8-ness)
    BINARY = 14;

    /// Fixed-size binary. Each value occupies the same number of bytes
    FIXED_SIZE_BINARY = 15;

    /// int32_t days since the UNIX epoch
    DATE32 = 16;

    /// int64_t milliseconds since the UNIX epoch
    DATE64 = 17;

    /// Exact timestamp encoded with int64 since UNIX epoch
    /// Default unit millisecond
    TIMESTAMP = 18;

    /// Time as signed 32-bit integer, representing either seconds or
    /// milliseconds since midnight
    TIME32 = 19;

    /// Time as signed 64-bit integer, representing either microseconds or
    /// nanoseconds since midnight
    TIME64 = 20;

    /// YEAR_MONTH interval in SQL style
    INTERVAL_MONTHS = 21;

    /// DAY_TIME interval in SQL style
    INTERVAL_DAY_TIME = 22;

    /// Precision- and scale-based decimal type with 128 bits.
    DECIMAL128 = 23;

    /// Defined for backward-compatibility. DECIMAL == DECIMAL128
    DECIMAL = 24;

    /// Precision- and scale-based decimal type with 256 bits.
    DECIMAL256 = 25;
  }
  string name = 1;
  PlainDataType type = 2;
}
