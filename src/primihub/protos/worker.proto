syntax = "proto3";
package primihub.rpc;

import "src/primihub/protos/common.proto";
import "src/primihub/protos/psi.proto";
import "src/primihub/protos/pir.proto";

message PushTaskRequest {
  bytes intended_worker_id = 1;
  Task task = 2;
  int64 sequence_number = 3;
  int64 client_processed_up_to = 4;
  bytes submit_client_id = 5;
}


message PushTaskReply {
  int32 ret_code = 1;  // 0: success  1: doing  2: error
  bytes node_id = 2;
  bytes job_id = 3;
  bytes task_id = 4;
  bytes msg_info = 5;
  repeated Node notify_server = 6;
  repeated Node task_server = 7;
}

message ExecuteTaskRequest {
  oneof algorithm_request {
    PsiRequest psi_request = 1;
    PirRequest pir_request = 2;
  }

  Params params = 3;
  bytes submit_client_id = 4;
}

message ExecuteTaskResponse {
  oneof algorithm_response {
    PsiResponse psi_response = 1;
    PirResponse pir_response = 2;
  }
}

message TaskRequest {
  string job_id = 1;
  string task_id = 2;
  string role = 3;
  uint64 data_len = 4;
  bytes data = 22;
}

message TaskResponse {
  retcode ret_code = 1;
  string  msg_info = 2;
  uint64 data_len = 4;
  bytes data = 20;
}

message ForwardTaskRequest {
  Node dest_node = 1;
  TaskRequest task_request = 2;
}

message KillTaskRequest {
    enum executorType {
        CLIENT = 0;     // executed by client
        SCHEDULER = 1;  // executed by scheduler
    }
    string job_id = 1;
    string task_id = 2;
    executorType executor = 3;
}

message KillTaskResponse {
    retcode ret_code = 1;
    string msg_info = 2;
}

service VMNode {
  rpc SubmitTask(PushTaskRequest) returns (PushTaskReply);
  rpc ExecuteTask(stream ExecuteTaskRequest) returns (stream ExecuteTaskResponse);
  rpc Send(stream TaskRequest) returns (TaskResponse);
  rpc Recv(TaskRequest) returns (stream TaskResponse);
  rpc SendRecv(stream TaskRequest) returns (stream TaskResponse);
  rpc ForwardSend(stream ForwardTaskRequest) returns (TaskResponse); // forward data as proxy
  rpc ForwardRecv(TaskRequest) returns (stream TaskRequest);  // forward data as proxy
  rpc KillTask(KillTaskRequest) returns (KillTaskResponse);
}

