name: primihub release actions

on:
  push:
    tags: [ '*' ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: primihub/primihub-node

jobs:
  build-on-ubuntu-amd64:
    runs-on: [self-hosted, Linux, X64]
    steps:
      - uses: actions/checkout@v3
      - name: bazel build
        run: |
          # cc_binary
          bash pre_build.sh
          bazel build --config=linux_`arch` //:node \
            //:py_main \
            //:cli \
            //src/primihub/pybind_warpper:opt_paillier_c2py \
            //src/primihub/pybind_warpper:linkcontext
          tar zcf primihub-linux-amd64.tar.gz bazel-bin/cli \
             bazel-bin/node \
             bazel-bin/py_main \
             bazel-bin/src/primihub/pybind_warpper/opt_paillier_c2py.so \
             bazel-bin/src/primihub/pybind_warpper/linkcontext.so

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: primihub-linux-amd64
          path: ./primihub-linux-amd64.tar.gz

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
            files: |
              ./primihub-linux-amd64.tar.gz

  build-on-ubuntu-arm64:
    runs-on: [self-hosted, Linux, ARM64]
    steps:
      - uses: actions/checkout@v3
      - name: bazel build
        run: |
          # cc_binary
          bash pre_build.sh
          bazel build --config=linux_`arch` //:node \
            //:py_main \
            //:cli \
            //src/primihub/pybind_warpper:opt_paillier_c2py \
            //src/primihub/pybind_warpper:linkcontext

          tar zcf primihub-linux-arm64.tar.gz bazel-bin/cli \
             bazel-bin/node \
             bazel-bin/py_main \
             bazel-bin/src/primihub/pybind_warpper/opt_paillier_c2py.so \
             bazel-bin/src/primihub/pybind_warpper/linkcontext.so

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: primihub-linux-arm64
          path: ./primihub-linux-arm64.tar.gz

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
            files: |
              ./primihub-linux-arm64.tar.gz

  build-on-mac-amd64:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup bazelisk
        uses: bazelbuild/setup-bazelisk@v2
      - name: set PYTHON LINK_OPTS
        run: ./pre_build.sh
        shell: bash

      - name: bazel build
        run: |
          # cc_binary
          bazel build --config=darwin_x86_64  //:node \
            //:py_main \
            //:cli \
            //src/primihub/pybind_warpper:opt_paillier_c2py \
            //src/primihub/pybind_warpper:linkcontext

          tar zcf primihub-darwin-amd64.tar.gz bazel-bin/cli \
            bazel-bin/node \
            bazel-bin/py_main \
            bazel-bin/src/primihub/pybind_warpper/opt_paillier_c2py.so \
            bazel-bin/src/primihub/pybind_warpper/linkcontext.so

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
            files: |
              ./primihub-darwin-amd64.tar.gz

  build-on-mac-arm64:
    runs-on: [self-hosted, ARM64, macOS]
    steps:
      - uses: actions/checkout@v3
      - name: bazel build
        run: |
          # cc_binary
          bash pre_build.sh
          bazel build --config=darwin_arm64 //:node \
              //:py_main \
              //:cli \
              //src/primihub/pybind_warpper:opt_paillier_c2py \
              //src/primihub/pybind_warpper:linkcontext

          tar zcf primihub-darwin-arm64.tar.gz bazel-bin/cli \
              bazel-bin/node \
              bazel-bin/py_main \
              bazel-bin/src/primihub/pybind_warpper/opt_paillier_c2py.so \
              bazel-bin/src/primihub/pybind_warpper/linkcontext.so

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
            files: |
              ./primihub-darwin-arm64.tar.gz


  docker-image-build-and-publish:
    runs-on: ubuntu-latest
    needs:
      - build-on-ubuntu-amd64
      - build-on-ubuntu-arm64

    # permissions:
    #   contents: read
    #   packages: write
    #   id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        # if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Download amd64 artifact
        uses: actions/download-artifact@v3
        with:
          name: primihub-linux-amd64

      - name: Download arm64 artifact
        uses: actions/download-artifact@v3
        with:
          name: primihub-linux-arm64

      # Build and push Docker image with Buildx
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.release
          # push: ${{ github.event_name != 'pull_request' }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
